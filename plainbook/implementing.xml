<!DOCTYPE chapter SYSTEM "../resources/plainbook/plainbook.dtd" >
	<chapter id="chp_implementing" title="Implementing the steps">
	<p>To give aspiring Cucumber ninjas more examples to copy and
		paste while they are practising their
		new skills, we now implement step definitions
		from <link ref="chp_feature_files" />. We present the most important
		snippets of the code to help you focus on the key parts. You can download the entire
		source code with all the additional project files from <url link="http://cuke4ninja.com"/>.</p>
	<section id="sec_basic_feature_file" title="The basic feature file &ndash; again">
	<p>
		Create a new folder for the project, and add two subfolders to it:
			<code>features</code>
			and
			<code>src</code>. The feature files, unsurprisingly, go in the <code>features</code> subfolder. 
			We use the <code>src</code> subfolder for the implementation.</p>
			<p>Create a new file in the
			<code>features</code> folder
			(for example,
			<code>ninja_survival_rate.feature</code>) with the following content: 			
			</p>
			<code file="ruby/NinjaSurvivalRate/features/ninja_survival_rate.feature"/>
	</section>
	
	

			<section id="sec_steps_and_regex" title="Steps and regular expressions">
			<p>Cucumber uses regular expressions to match steps in the feature file to step definitions in code.
			We really need only three
			step definitions &ndash; one that sets the ninja belt level at the start, one that captures
			what the ninja does when attacked by an opponent and one that checks if the specified
			action was in that list of activities. </p>

			<sidebar id="side_quick_intro_regex" title="A very quick introduction to regular expressions">
			<p> 
			Regular expressions are a way to specify patterns of text. If you have never used them before, here are
			just a few basic rules to follow. </p>			
			<ul>
			<li>Letters and numbers have literal values. The <code>ninja</code> pattern matches only
			the exact lower-case sequence n,i,n,j,a </li>
			<li>Square brackets define groups of interchangeable elements. The whole group can match only a single character. So <code>[Nn]inja</code> matches either
			n,i,n,j,a or N,i,n,j,a but not N,n,i,n,j,a </li>
			<li>An asterisk turns the character or group immediately before it to a sequence that repeats zero or more times. 
			So <code>Nin*ja</code> matches N,i,n,j,a but also N,i,j,a and
			 N,i,n,n,n,n,j,a</li>
			<li>A question mark turns the character or group immediately before it into a sequence that appears zero or one time. So <code>N?inja</code>
			matches N,i,n,j,a and i,n,j,a, but not N,N,i,n,j,a</li>
			<li>A dash defines a range. For example, <code>ninja1-9</code> matches n,i,n,j,a,1 but also
			n,i,n,j,a,2 and so on up to n,i,n,j,a,9 <!-- Ranges work on ASCII/UTF code values, so numbers come before uppercase letters, which come before lowercase
			letters. Non-english letters might not be in the same sequence that they are in local alphabets. -->
			</li>
			<li>A dot (<code>.</code>) matches any character. So <code>Ninj.</code> matches N,i,n,j,x and any other sequence of five characters
			starting with N,i,n,j</li>
			<li>A backslash <code>\</code> turns a special character into a literal value. For example, <code>1\-9</code>
			 matches only the sequence 1,-,9, not a number between 1 and 9</li>
			<li><code>\s</code> matches a whitespace (blank)</li>
			<li>You can mix and match ranges, asterisks, letters and so on</li>
			<li>A caret (<code>^</code>) matches the beginning of the line. A dollar sign (<code>$</code>) matches the end of the line</li>
			<li>Parentheses () mark parts of an expression that are captured for later processing.</li>
			</ul>
			</sidebar>			
				<section id="sec_initialising_context" title="Initialising the context">
				<p>To set the black-belt level, we create a step definition that matches the line:
				<quote>Given the ninja has a third-level black belt</quote>
				and captures the word between &lsquo;a&rsquo; and &lsquo;level&rsquo; as an argument. We can use a dash
				to define a range of characters. So
				<code>a-z</code> will match any lower-case letter. An asterisk after any character says
				that we expect a sequence. We use square brackets to apply an asterisk to the entire range, not 
just the previous 
				letter.				
				We add brackets around the expression to tell Cucumber
				to capture the word as an argument and pass it on. So the full expression we want to use for the 
				match is: 
				</p>
				<code>^the ninja has a ([a-z]*)\-level black belt$</code>
				<note title="Double escape in Java">
				<p>The backslash <code>\</code> in a regular expression escapes 
				the following character. In this case, we use a backslash to tell Cucumber that a dash
				is literally a dash, not a special range definition symbol such as in <code>a-z</code>. Ruby is OK
				with the expression as it is. In Java, backslash is also used in strings to escape the
				following character, so you'll have to use two backslashes <code>\\</code> to write it. So the correct
				way to specify this in Java and .NET is:
				</p>
				<code>^the ninja has a ([a-z]*)\\-level black belt$</code>
				</note>
				</section>
				<section title="Triggering the action">
		
				<p>To trigger the action in both scenarios, we create a step definition that matches the lines: 
		<quote>When attacked by a samurai</quote>
		and
		<quote>When attacked by Chuck Norris</quote>
		To do this, we need to capture everything after &lsquo;attacked by&rsquo; as the opponent, ignoring &lsquo;a&rsquo; and a space
		if they follow straight after. The expression <code>[a\s]</code> will match the lower-case letter <code>a</code> or a space 
		(matched by a special sequence <code>\s</code>).
		We again add an asterisk to say that we expect any sequence of spaces or the letter <code>a</code>, including
 nothing. We don't add brackets
		around this expression because we want Cucumber to just ignore it. After this we want to capture anything up uo
the end
		of the line. A dot matches any character,  an asterisk says there could be more than one character,
		and we add a dollar sign <code>$</code> at the end of the expression to tell Cucumber that the sequence
		should extend to the end of the current line. We want Cucumber to capture the sequence but not the line-end character,
		so we close the bracket before the dollar sign. So the full regular expression for the action step is: </p>
		<code>^attacked by [a\s]*(.*)$</code>
				</section>
				<section title="Validating the result">
		<p>
		To validate the result, we create a step definition that matches the line:
		<quote>Then the ninja should engage the opponent</quote>
 		or any other actions that the ninja should take, for example run away.
		We capture anything that follows &lsquo;should engage&rsquo;
		using the same expression as in the previous step, matching everything from
		a certain position till the end of the line <code>(.*)$</code>. The full expression in this case is:</p>		
		<code>^the ninja should (.*)$</code>
				</section>
			</section>
			<p>
			Now we can wire these expressions into code. Continue reading the section relevant to your technology platform.
			</p>
			<ul>
			<li>For the Ruby implementation, see <link ref="sec_ninja_survival_ruby" /></li>
			<li>For the Java implementation, see <link ref="sec_ninja_survival_java" /></li>
			<li>For the .NET implementation, see <link ref="sec_ninja_survival_net" /></li>
			</ul>
		<section id="sec_ninja_survival_ruby" title="Implementing in Ruby">
		<p>
			Create a new subfolder called
			<code>step_definitions</code>
			inside
			<code>features</code>. Run
			<code>cucumber</code>
			from the main project folder; it will display on screen an example of how the steps could be
			implemented. Copy and paste this into a new file called
			<code>ninja_steps.rb</code>, and replace the regular expressions with the ones we 
			suggested in the previous section. 
		</p>
		<important title="Do I always create a steps file for a feature file?">
		Not necessarily. Cucumber will try to load steps from any step definition file within the <code>step_definitions</code>
		when it executes a feature file. For
		convenience, it is often useful to keep related steps together, but you can share context across different step 
		definition files. See <link ref="sec_sharing_context" /> for more information.
		</important>
		<section title="Initializing the context">
		<p>We just need to pass the argument captured by the step information
		to the initialiser of the <code>Ninja</code> class, and store the resulting <code>Ninja</code>
		object as a local variable. In Ruby, one way to do this is:</p> 
		<code file="ruby/NinjaSurvivalRate/features/step_definitions/ninja_steps.rb" part="belt" />
		
		<important title="Wow &ndash; where did that class and initialiser come from?">
		<p>If you're reading this carefully, you probably noticed that this is the first time we used a <code>Ninja</code>
		class and assumed what the arguments of its initialiser are. Don't scroll up looking for the class definition, because it 
		doesn't exist yet. We will drive the class interface from its usage, so we first declare what we need that class to
		do in the step definitions and then implement the class to match the required interface and behaviour. BDD takes the 
		test-first ideas of test-driven development (TDD) to the business requirements level.</p>
		</important>
		</section>
		<section title="Triggering the action">
		<p>To trigger the action, we take the <code>Ninja</code> object initialised in the first step and
		pass the opponent name/type to its <code>attacked_by</code> method.
		To be able to check the resulting actions, we'll expect the <code>attacked_by</code> method to return 
		the actions a ninja
		should take when attacked by a particular opponent and store them in a local variable.
		</p>
		<code file="ruby/NinjaSurvivalRate/features/step_definitions/ninja_steps.rb" part="attacked" />		 
		</section>
		<section title="Validating the result">
		<p>
		To validate the results, we just need to check whether the action expected in the step is included
		in the list of actions we saved previously. 				
		</p>		
		<code file="ruby/NinjaSurvivalRate/features/step_definitions/ninja_steps.rb" part="actions" />		
		<important title="What is that &lsquo;should include&rsquo; syntax?">
		<p>Cucumber in Ruby relies on RSpec expectations to perform validations of expected outcomes. 
		<code>should include</code> is a way to specify that a collection should contain an element with RSpec. See
		<url link="http://rspec.info/"/> or <i>The RSpec Book</i><bib ref="chelimsky:rspec" /> for more information 
		on the RSpec syntax.</p>
		</important>
		</section>
		<section title="Implementing the domain code">
		<p>
			We still don't have a Ninja class to handle the calls from the steps, so let's add it. Create a
			file called
			<code>ninja.rb</code>
			in the
			<code>src</code>
			folder with the following content:
		</p>
		<code file="ruby/NinjaSurvivalRate/src/ninja.rb" />
		<p>
			Now run
			<code>cucumber</code>
			again. You should get a nice green report, as in
			<link ref="fig.ninja_survival_ruby_pass" />
		</p>
		<img id="fig.ninja_survival_ruby_pass" src="ninja_survival_ruby_pass.png" title="Ninjas survive in Ruby" />
		</section>
	</section>
	<section id="sec_ninja_survival_java" title="Implementing in Java">
		<p>In this example, we use Maven to manage the dependencies, as SMERSH controls a stake in the world's biggest
		internet providers and Maven finances our drug-smuggling operations by downloading unnecessary libraries
		every time it is run. Create a pom.xml for your project as explained in <link ref="sec_maven" />, and run
		the following command to get a suggested structure for step definitions:</p>
		<code>mvn clean compile integration-test</code>
		<note title="Remember to download the gems the first time you run Cucumber from Maven">
		<p>When you run Cucumber with Maven for the first time, remember to add <code>-Dcucumber.installGems=true</code>.
		If you do not do this, Maven won't install cuke4duke and all the dependent gems in the local repository, and
		we won't get our money from force-feeding bandwidth. </p>
		</note>
		<p>Put the suggested expressions into a new class in the <code>src/test</code>
		folder. In the example, we use <code>src/test/java/ninjasurvivalrate/NinjaSurvivalSteps.java</code>. Now let's
		change the expressions to the one we defined earlier.</p>
		<important title="Do I always create a step class for a feature file?">
		Not necessarily. Cucumber will try to load steps from any step definition class in the class path when it executes a feature file. For
		convenience, it is often useful to keep related steps together, but you can even share state across different step 
		definition classes. See <link ref="sec_sharing_context" /> for more information.
		</important>

		<section title="Initializing the context">
		<p>We just need to pass the argument captured by the step information
		to the constructor of the <code>Ninja</code> class, and store the resulting <code>Ninja</code>
		object as a local variable. In Java, one way to do it is this:</p> 
		<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/NinjaSurvivalSteps.java" part="belt" />
		
		<important title="Wow &ndash; where did that class and constructor come from?">
		<p>If you're reading this carefully, you probably noticed that this is the first time we used a <code>Ninja</code>
		class and assumed what the arguments of its constructor are. Don't scroll up looking for the class definition, because it 
		doesn't exist yet. We will drive the class interface from its usage, so we first declare what we need that class to
		do in the step definitions and then implement the class to match the required interface and behaviour. BDD takes the 
		test-first ideas of TDD to the business requirements level.</p>
		</important>
		</section>
		<section title="Triggering the action">
		<p>To trigger the action, we take the <code>Ninja</code> object initialised in the first step and
		pass the opponent name/type to its <code>attackedBy</code> method.
		To be able to check the resulting actions, we'll expect the <code>attackedBy</code> method to return 
		the actions a ninja
		should take when attacked by a particular opponent. We'll store them in a local variable for later inspection.
		</p>
		<note title="Remember the double escape"> 
		<p>To specify a backslash in Java, you have to write it twice (\\).</p></note>
		<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/NinjaSurvivalSteps.java" part="attacked" />		 
		</section>
		<section title="Validating the result">
		<p>
		To validate the results, we just need to check whether the action expected in the step is included
		in the list of actions we saved previously. Cuke4Duke uses the normal JUnit assertions. 				
		</p>		
		<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/NinjaSurvivalSteps.java" part="actions" />		
		</section>
		<section title="Implementing the domain code">
		<p>
			We still don't have a Ninja class to handle the calls from the steps, so let's add it. Create it in the
			<code>src/main</code> directory. In this example, we use <code>src/main/java/ninjasurvivalrate/Ninja.java</code>.
			
			The content is relatively straightforward:
		</p>
		<code file="java/NinjaSurvivalRate/src/main/java/ninjasurvivalrate/Ninja.java" />
		<p>
			Now run
			<code>mvn clean compile integration-test</code>
			again. You should get a nice green report, as in
			<link ref="fig.ninja_survival_java_pass" />
		</p>
		<img float="true" id="fig.ninja_survival_java_pass" src="ninja_survival_java_pass.png" title="Ninjas survive in Java" />
		</section>
	</section>
	<section id="sec_ninja_survival_net" title="Implementing in .NET">
	
		<p>
			Create a .NET project and put the feature file into it, in the <code>features</code> folder. Create
			a new subfolder called
			<code>step_definitions</code>
			inside
			<code>features</code> and add a <code>cucumber.wire</code> file with the following content:
			</p>
		            <code file="dotnet/HelloCucumber/Cuke4NukeExample/features/step_definitions/cucumber.wire"/>
		<p>This will set up the Cuke4Nuke integration with Cucumber. </p>
		<p>
			Now run
			<code>cuke4nuke</code>
			from the main project folder; it will display on screen an example of how the steps could be
			implemented. Copy that and paste it into a new source file called
			<code>NinjaSteps.cs</code>. Replace the regular expressions with the ones we 
			suggested in the previous section. 
		</p>
		<important title="Do I always create a step class for a feature file?">
		Not necessarily. Cucumber will try to load steps from any step definition class in the class path when it executes a feature file. For
		convenience, it is often useful to keep related steps together, but you can even share state across different step 
		definition classes. See <link ref="sec_sharing_context" /> for more information.
		</important>
		<section title="Initialising the context">
		<p>We just need to pass the argument captured by the step information
		to the initialiser of the <code>Ninja</code> class, and store the resulting <code>Ninja</code>
		object as a local variable. In .NET, one way to do this is:</p> 
		<code file="dotnet/NinjaSurvivalRate/src/NinjaSteps.cs" part="belt" />
		
		<important title="Wow &ndash; where did that class and constructor come from?">
		<p>If you're reading this carefully, you probably noticed that this is the first time we used a <code>Ninja</code>
		class and assumed what the arguments of its constructor are. Don't scroll up looking for the class definition, 
		because it 
		doesn't exist yet. We will drive the class interface from its usage, so we first declare what we need that class to
		do in the step definitions and then implement the class to match the required interface and behaviour. BDD takes the 
		test-first ideas of TDD to the business requirements level.</p>
		</important>
		</section>
		<section title="Triggering the action">
		<p>To trigger the action, we take the <code>Ninja</code> object initialised in the first step and
		pass the opponent name/type to its <code>AttackedBy</code> method.
		To be able to check the resulting actions, we'll expect the <code>AttackedBy</code> method to return 
		the actions a ninja
		should take when attacked by a particular opponent and store them in a local variable.
		</p>
		<code file="dotnet/NinjaSurvivalRate/src/NinjaSteps.cs" part="attacked" />		 
		</section>
		<section title="Validating the result">
		<p>
		To validate the results, we just need to check whether the action expected in the step is included
		in the list of actions we saved previously. For validations, we use standard NUnit assertions. </p>
		<code file="dotnet/NinjaSurvivalRate/src/NinjaSteps.cs" part="actions" />		
		</section>
		<section title="Implementing the domain code">
		<p>
			We still don't have a Ninja class to handle the calls from the steps, so let's add it. Create a
			
			<code>Ninja.cs</code>
			file in the project with the following content:
		</p>
		<code file="dotnet/NinjaSurvivalRate/src/Ninja.cs" />
		<p>
			Now run
			<code>Cuke4Nuke</code>
			again. You should get a nice green report.
		</p>
		</section>
	</section>
	<section title="Sharing context across step definition files" id="sec_sharing_context">
	<p>Putting all our ninjas in a single file is a good trick, made popular by the Black Star Ninja in the famous documentary about the
	life of ninjas on the Philippines from the 80s, wrongly entitled <i>The American Ninja</i>. However, sometimes it is useful to break our step definitions
	into several files, and then share the context between them. Cucumber supports this with all the platforms, but in different ways.</p>
	
	<p>So far, all our steps have been in a single file, corresponding to a feature file. As things get more complex, you'll want to write feature
	files that reuse some of the steps from other feature files and combine them with other steps, so the mapping between a step definition and
	a feature file is not necessarily the same as between Subzero and Scorpion. In this section, we'll show aspiring Ninja Cucumberists how to
	split these apart.</p>
	<p>To demonstrate this, let's add a new feature file that reuses some of the steps that we already defined and adds some new steps. Paste the
	following content into <code>features/split.feature</code>:</p>
	<code file="ruby/NinjaSurvivalRate/features/split.feature" />
	<p>The initial step <code>Given the ninja has a third level black-belt</code> will be already implemented. This step previously created a 
	<code>Ninja</code> object that we'll share with another step definition file.</p>
	<section title="Sharing context in Ruby" id="sec_sharing_context_ruby">
	<p>Ruby loads step definitions from any files in the <code>step_definitions</code> folder. They do not all have to be in a single file. 
	To see this, run the following command line:</p>
	<code>cucumber features/split.feature</code>
	<p> Cucumber will execute just the new feature and report that it found the first step in <code>ninja_steps.rb</code> but that the other steps
	are still undefined (see <link ref="img_ruby_split" />).</p>
	<img src="split-ruby.png" id="img_ruby_split" title="Cucumber finds some split ninja steps" />
	<p> Now we can add another step definition that completes the impact analysis required to decide whether the brains of a ninja should not be
	harmed or be split after a direct hit. Just to demonstrate that things can be a bit more complex, we'll put this logic into an 
	impact calculator. The step definition file just needs to read the ninja created by the step in <code>ninja_steps.rb</code> using the same
	class variable name <code>@ninja</code>. When Cucumber compiles the steps, both references to <code>@ninja</code> will map to the same value.
	</p>
	<code file="ruby/NinjaSurvivalRate/features/step_definitions/split_steps.rb" />
	<p>We'll leave the ImpactCalculator class to you for homework, or if you want to cheat go and get it from the 
	  <url link="http://github.com/davedf/cuke4ninja" title="Cuke4Ninja github repository" /> &ndash; look for a file called <code>impact_calculator.rb</code>.</p>
	</section>
	<section title="Sharing context in .NET" id="sec_sharing_context_net">
		<p>Cuke4Nuke loads step definitions from any classes annotated with Cucumber annotations such as 
<code>[Given]</code>,  
		they do not all have to be in the  same file. To see this, run your tests again after adding a the feature file <code>split.feature</code>. </p>
	
		<p>Cucumber will execute the new feature file and find some of the steps in the old <code>NinjaSteps.cs</code> step definition class, 
		but report other steps as still undefined.</p>
		<p>The first step, from <code>NinjaSteps.cs</code>, creates an internal <code>Ninja</code> object. 
Because we want to be able to reuse that 
		object in two different step definition classes, we have to enable another step definition class to somehow see that state. 
		Before you even think about saying &lsquo;static&rsquo; know that Chuck Norris moves static objects. 
		Cuke4Nuke shares context between step definitions using dependency injection. We can just create a class to hold the context 
		required for our steps and add an instance of that class as a constructor argument for step definition classes. Cuke4Nuke will ensure 
		that both classes get the same context.</p>
		<p>First, let's define a context class. We just need to share the <code>Ninja</code> object so far, so let's create a container for a ninja:</p>
		<code file="dotnet/NinjaSurvivalRateWithSharedState/src/NinjaContext.cs"/>
		<p>Now let's change the existing <code>NinjaSteps.cs</code> to expect an instance of this new class in the constructor:</p>
		<code part="constructor" file="dotnet/NinjaSurvivalRateWithSharedState/src/NinjaSteps.cs" />
		<p>At this point, you should be able to run the tests again and not notice any difference from the old functionality. 
		  Although the old step definition class did not have a constructor and this one does, and it requires a context parameter, 
		  Cuke4Nuke wires this in automatically using your selected dependency injection container</p>
		<p>Now we can add another step definition class with a similar constructor to handle the missing steps:</p>
		<code file="dotnet/NinjaSurvivalRateWithSharedState/src/SplitSteps.cs" />
		<p>We'll leave it to you for homework to implement the missing function for impact analysis 
		in the <code>Ninja</code> class and to change the rest of the <code>NinjaSteps.cs</code> to use the context 
		<code>Ninja</code>, not the private one. 
		If you want to cheat or admit that you are lazy, look for a folder called <code>NinjaSurvivalRateWithSharedState</code> in 
		the <url link="http://github.com/davedf/cuke4ninja" title="Cuke4Ninja code repository" />.</p>	
	</section>
	<section title="Sharing context in Java" id="sec_sharing_context_java">
		<p>Cuke4Duke loads step definitions from any classes annotated with Cucumber annotations such as
 <code>@Given</code>,  they do not all have to be in the  same file. To see this, run your tests again after adding a new, empty
 feature file. For example, if you are using Maven, run the following command line:</p>
		<code>mvn integration-test</code>
		<p>Cucumber will execute the new feature file and find some of the steps in the old <code>NinjaSkillSteps.java</code> step definition class, but report other steps as still undefined (see <link ref="img_java_split" />).</p>
		<img src="split-java.png" id="img_java_split" title="Cuke4Duke finds some split ninja steps" />
		<p>The first step, from <code>NinjaSkillSteps.java</code>, creates an internal Ninja object. Because we want to be able to reuse that 
		object in two different step definition classes, we have to enable another step definition class to somehow access that context. 
		Before you even think about saying &lsquo;static&rsquo; know that Chuck Norris moves static objects. Remember that
 you had to add PicoContainer or Spring to the classpath? Now you'll finally understand why. 
Cuke4Duke shares context between step definitions using 
dependency injection. We can just create a class to hold the context required for our steps and add an instance of that
 class as a constructor argument for step definition classes. Cuke4Duke will ensure that both classes get the same context.
 </p>
		<p>First, let's define a context class. We just need to share the <code>Ninja</code> object so far, so let's 
create a container for a ninja:</p>
		<code file="java/NinjaSurvivalRateWithSharedState/src/test/java/ninjasurvivalrate/NinjaContext.java"/>
		<p>Now let's change the existing <code>NinjaSurvivalSteps.java</code> to expect an instance of this new class in the constructor:</p>
		<code part="constructor" file="java/NinjaSurvivalRateWithSharedState/src/test/java/ninjasurvivalrate/NinjaSurvivalSteps.java" />
		<p>At this point, you should be able to run the tests again and not notice any difference from the old functionality. Although 
the old step definition class did not have a constructor and this one does, and it requires a context parameter, 
Cuke4Duke wires this in automatically using your selected dependency injection container</p>
		<p>Now we can add another step definition class with a similar constructor to handle the missing steps:</p>
		<code file="java/NinjaSurvivalRateWithSharedState/src/test/java/ninjasurvivalrate/SplitSteps.java" />
		<p>We'll leave it to you for homework to implement the missing function for impact analysis in the <code>Ninja</code> class and
		to change the rest of the <code>NinjaSurvivalSteps.java</code> to use the context <code>Ninja</code> instead of the private one. If you want to cheat or admit that you are lazy, look for a folder called <code>NinjaSurvivalRateWithSharedState</code> in the <url link="http://github.com/davedf/cuke4ninja" title="Cuke4Ninja code repository" />.</p>	
	</section>
	</section>
	</chapter>
