<!DOCTYPE chapter SYSTEM "../resources/plainbook/plainbook.dtd" >
<chapter id="chp_complex_scenarios" title="Managing complex scenarios">
     <p>The BDD Given-When-Then scenario structure is too verbose when a specification
         includes lots of similar cases or when complicated objects come into play. One of the strengths of Cucumber is its ability to
         handle complex scenarios and groups of scenarios efficiently. It has several features that help developers
         and testers write and manage complex specifications yet still keep them in a form that is self-explanatory.
         In this chapter, we explore several such features.</p>
      
      	<section id="sec_more_complex" title="Complex setups and validations">
		<p>
			Steps can also start with keywords
<code>And</code> and
<code>But</code>. They continue the current section and allow us to use multiple steps to set up the context or validate several outcomes. Using these keywords
			can improve readability. For example, the following scenario uses two validations:
		</p>
<code>
	Scenario: Angry Chuck
		Given the ninja has a third level black-belt 
		<b>Given</b> the ninja has never fought Chuck Norris before 
		When attacked by Chuck Norris
		Then the ninja should apologise 
		<b>Then</b> the ninja should run away
</code>	
	<p>It reads better when it is written in the following way:</p>
<code>
	Scenario: Angry Chuck
		Given the ninja has a third level black-belt 
		<b>But</b> the ninja has never fought Chuck Norris before 
		When attacked by Chuck Norris
		Then the ninja should apologise 
		<b>And</b> the ninja should run away 
</code>

<p>
	Technically, it isn't really important whether a step starts with
	<code>Given</code>,	<code>And</code> or <code>But</code>
	(or <code>Then</code> and <code>When</code>, actually). Cucumber will match the step using a regular expression 
	and execute it. Using <code>And</code> and <code>But</code>
	just makes it easier to read the specification.
</p>
	<p>This also means that the syntax allows you to chain <code>When</code> steps by using <code>And</code> or
<code>But</code> steps. Though the Gherkin syntax won't stop you, it will send a secret message to Chuck Norris and 
he will come to your house
 and burn it to the ground with you in it.<footnote>Legal note: Chuck reserves the right to sub-contract to the Deadly Viper Assassination Squad if he is busy that day.</footnote> A scenario should have one and only one action.</p>
<important title="But I need to execute several actions">
	<p>If you want to include more than one
	<code>When</code> step, then you have a complex multi-step action that means something to the business.
	 This flow should be captured by your domain model. Talk to the business users, decide
	  on the name for the flow and specify it using a single
	   step, which invokes the appropriate domain model procedure. Don't use feature files for scripting the flow.
	</p>
</important>
	
</section>
      <section id="sec_groups_of_scenarios" title="Managing groups of related scenarios">
     <p>    The feature file we used
         in <link ref="chp_feature_files" /> has 13 lines for 2 scenarios. To specify a business
         rule properly we would most likely have to add many more scenarios, that illustrate what happens when a
         ninja is not experienced enough to engage a samurai, and when it becomes experienced enough to engage Chuck Norris,
         not to mention other ninjas and types of opponents. If we had to add four lines for every new scenario,
         the file would quickly become too big to be readable.
     </p>
     <p>To address this, Gherkin supports scenario outlines. Scenario outlines are essentially template scenarios, allowing
     us to provide the scenario structure once and then illustrate the behaviour with different combinations of parameters. Scenario outlines
     are a great way to consolidate and simplify related scenarios and present them in a way
     that is easier to understand. Here is an example:</p> 
     <code>
Scenario <b>Outline</b>: third-level ninjas engage samurai
  Given the ninja has a <b>&lt;belt level&gt;</b> level black-belt 
  When attacked by <b>&lt;opponent&gt;</b>
  Then the ninja should <b>&lt;expected action&gt;</b>
 &nbsp; 
<b>  Examples:
  |belt level |opponent     |expected action	 |
  |third      |a samurai    |engage the opponent |
  |third      |Chuck Norris |run for his life	 |
</b>     
     </code>
     <p>The interesting parts are in bold:     </p>
     <ul>
     <li>Instead of <code>Scenario</code>, this block starts with <code>Scenario Outline</code></li>
     <li>The steps have placeholders enclosed inside less-than and greater-than symbols (&lt; and &gt;).</li>
     <li>There is a new block after the steps, starting with a line that contains the <code>Examples</code> keyword and a colon.</li>
     <li>A table in the normal wiki format (pipes separate cells, one row per line) defines the examples and expected outcomes. The first
     row of the table contains placeholder names.</li>
     </ul>
 <p>This feature file is functionally equivalent to the one we used in the previous chapter. The same step definitions
 will be used to execute it. In fact, try it yourself. Delete the two step definitions we used earlier, or create 
 a new feature file and run it using Cucumber. You'll see the same results, just formatted differently. </p>
 <p>What's nice about scenario outlines is that we can easily add more examples. To make the specification stronger, let's
 add another example that shows that second level ninjas don't even fight against samurai. We add just one line to the table:  
 <code>
|second		|a samurai	|run for his life	|
 </code>
 The result is easier to read and understand than if we added another four-line scenario. With more complex
 scenarios, the benefit is greater still.</p>
 <p>Run Cucumber again and the test should fail. If you are running Ruby, you should get an error similar to the one in
 <link ref="fig.ninja_survival_outlines_ruby_fail" />. If you are running Java, you should get an error similar to the one in <link ref="fig.ninja_survival_outlines_java_fail" />.</p>
<img src="ninja_survival_outlines_ruby_fail.png" id="fig.ninja_survival_outlines_ruby_fail" title="Ruby ninjas engage samurai even when they should not" />
<p>For a homework assignment, change the Ninja class to make this test pass and rerun Cucumber to confirm that you 
have fixed it.</p>

<img src="ninja_survival_outlines_java_fail.png" id="fig.ninja_survival_outlines_java_fail" title="Java ninjas engage samurai even when they should not" />

<p>Scenario outlines are one of the most important tools for Cucumber ninjas, as they allow us to describe complex 
scenario groups easily and make the files shorter and easier to understand. </p>

</section>
<section id="sec_sets_of_attributes" title="Working with sets of attributes">
<p>Given-When-Then plain language scenarios can quickly become too verbose when they have many important attributes or
    work with lists of objects. If the list of Given or Then steps starts growing too much,
the scenarios become hard to understand and maintain. For example:
 </p>
 <code>
 Given a ninja has a third-level black belt
 and the ninja is a level two katana user
 and the ninja is a level three sake drinker
 and the ninja has never fought Chuck Norris before
 and the ninja has fought samurai before
 and the ninja has level five magic powers
 When ...
 </code>
 <p>Writing scenarios like this complicates both the feature file and the step definition code unnecessarily and makes
 it hard to understand the behaviour the scenario is illustrating. Cucumber allows us to specify related attributes as a table. For example:
 </p>
	<code file="ruby/NinjaSurvivalRate/features/ninja_survival_rate_tables.feature" part="singletable" />

 <section id="sec_ruby_tables" title="Reading tables in Ruby">
	<p>In Ruby, tables are converted automatically into <code>Cucumber::Ast::Table</code> objects. A step definition will
receive
	the whole table as an argument. The simplest way to use a table is to invoke the <code>hashes</code> method,
	which converts the entire table into an array of hashes, mapping the header values to cell values. Each element of the array
	represents a single data row. We can implement
	the step to handle creating a ninja from several properties by grabbing the first (and only) hash and passing it to the
	constructor:
	</p>
	<code file="ruby/NinjaSurvivalRate/features/step_definitions/ninja_steps.rb" part="singletable" />		
 	<p>See <url link="http://rdoc.info/github/aslakhellesoy/cucumber/master/Cucumber/Ast/Table" title="Cucumber AST Table API docs" /> on RDoc for more
 	information on other table methods.</p>
 </section> 
 <section id="sec_java_tables" title="Reading tables in Java">
 	<p>In Java, tables are converted automatically into <code>cuke4duke.Table</code> objects, which 
 	mirror the API of the <code>Cucumber::Ast::Table</code> ruby class. A step definition will
 	receive the entire table as an argument. The easiest way to process a table is to invoke the
 	<code>hashes</code> method to get a list of maps that represents the table. Each element of the list represents
 	one data row as a <code>Map&lt;String,String&gt;</code>, mapping column headers into cell values. For example, this is how
 	we can create a ninja using the <code>belt_level</code> property of the first map in the list:</p>
	<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/NinjaSurvivalSteps.java" part="singletable" />
	<p>See <url link="http://cukes.info/cuke4duke/cuke4duke/apidocs/cuke4duke/Table.html" title="Cuke4Duke API docs"/> on Cukes.info for more information
	on the Java table API.</p>
 </section>
 <section id="sec_net_tables" title="Reading tables in .NET">
 
 	<p>In .NET, tables are converted automatically into <code>Cuke4Nuke.Framework.Table</code> objects, which 
 	mirror parts of the API of the <code>Cucumber::Ast::Table</code> Ruby class. The table API in .NET is not
 	as nice and clean as it is in Ruby and Java, but it does the job. A step definition 
 	will receive the entire table as an argument. The easiest way to process a table is to invoke the
 	<code>Hashes</code> method to get a list of dictionaries that represents the table. Each element of the list represents
 	one data row as a <code>Dictionary&lt;string,string&gt;</code>, mapping column headers into cell values. For example, this is how
 	we can create a ninja using the <code>belt_level</code> property of the first map in the list:</p>
	<code file="dotnet/NinjaSurvivalRate/src/NinjaSteps.cs" part="singletable" />
	<p>See <url link="http://github.com/richardlawrence/Cuke4Nuke/blob/master/Cuke4Nuke/Framework/Table.cs" title="Cuke4Nuke Table source"/> on github
	for more information
	on the .NET table API.</p>
 </section>
</section>
<section id="sec_object_lists" title="Working with lists of objects">
<p>We can use tables to efficiently describe specifications that work with lists of objects. Instead of a very lengthy 
description that explains individual objects with Given-When-Then, we can just specify batches of objects in a table. 
For example, it is a well-known fact that only Chuck Norris can perform the roundhouse kick without wire fu and that he is
always extremely dangerous. We can specify this with the following scenario:
</p>
<code file="ruby/NinjaSurvivalRate/features/danger_levels.feature"/>
<p>In this case we are using tables for inputs (skills) and expected outputs (techniques and levels). Note that the table of skills
 does not have any headers. 
Unlike most other tools based on tables, Cucumber does not require the first row to be a header if that is not required. In addition, although
the API to pass tables to validation step definitions is the same, Cucumber does not require us to check every value individually. It
has a helper method to compare expected tabular outputs to actual values.
</p>	
<p>We'll go through the step definitions on all three platforms now. For homework, implement the <code>Skill</code> class to make the feature from this example pass. 
If you want to cheat, have a look at our website and download the solution from there. Once you have it running, the result
should be nice and green just as in <link ref="fig.skill_ruby_pass" />.</p>
<p>Then break the test by changing the code in the <code>Skill</code> class and
rerun the test to see it fail. For example, the result in <link ref="fig.skill_ruby_fail" /> is the result when
all the skills are available to everyone. Notice how Cucumber prints the outputs nicely to signal exactly what is wrong.</p>

 <img src="skill_ruby_pass.png" id="fig.skill_ruby_pass" title="Table comparisons in Ruby" />

<important title="What is the order of execution?">
<p>It's not important. When teams start with specification by example they often ask for the order of execution to
 be able to reuse context. For example, the two scenarios in this case have the same <code>Given</code> step, so
 setting it up in one place only and using it for both scenarios makes sense. Making one scenario dependent on another
 one or relying on the order of execution is bad practice. This makes it impossible to check individual scenarios
 in isolation or to get quick feedback from a subset of tests. Instead of making the scenarios interdependent, we can clarify 
things with a common setup. We explain this in <link ref="sec_background" />.   </p>
</important>

 <img src="skill_ruby_fail.png" id="fig.skill_ruby_fail" title="Cucumber clearly prints what's wrong when table comparisons fail" />

 <section  title="Advanced table operations in Ruby">
 <p>To process a table without a header row, we can call the <code>raw</code> method and get the entire table as
 an array of arrays of strings. The first-level array containa rows and the second-level arrays contain
 cell values inside each row. In this case, the table has only one column, so we'll get the following array
 <code>[["katana"],["karate-kick"],["roundhouse-kick"]]</code>. We can now process this easily and, for example, initialise
 an array of <code>Skill</code> objects with it.</p>
	<code file="ruby/NinjaSurvivalRate/features/step_definitions/skill_steps.rb" part="raw"/>

 <p>To validate the results in the third step, we should go through the list of skill objects and create an array
 of hashes corresponding to the expected outcome table. Then we can use the <code>diff!</code> method of the Cucumber table
 to compare the entire table with the expected list of hashes.</p>
	<code file="ruby/NinjaSurvivalRate/features/step_definitions/skill_steps.rb" part="diff"/>
<p>We can use the <code>diff!</code> method to compare a table against another table, an array of hashes, or an array of arrays of strings 
for cases when a table does not have a header row. </p>
 </section>
 
 <section title="Advanced table operations in Java">
 <p>To process a table without a header row, we can call the <code>raw</code> method and get
 the entire table as
 a <code>List&lt;List&lt;String&gt;&gt;</code>. The first-level list contains rows and the second-level lists contain
 cell values inside each row. In this case, the table has only one column, so we'll get the following List
 <code>[["katana"],["karate-kick"],["roundhouse-kick"]]</code>. We can now process this easily and, for example, initialise
 an array of <code>Skill</code> objects with it.</p>
	<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/SkillSteps.java" part="raw"/>

 <p>To validate the results in the third step, we should go through the list of skill objects and create a 
 <code>List&lt;Map&lt;String,String&gt;&gt;</code> 
 corresponding to the expected outcome table in the same format as the result of the <code>hashes</code> method we used earlier. 
 Then we can use the <code>diff!</code> method of the Cucumber table
 to compare the entire table with the expected list of hashes.</p>
	<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/SkillSteps.java" part="diff"/>
<p>We can use the <code>diff!</code> method to compare a table against another table, a list of hash-maps, or a list of lists of strings 
for cases when a table does not have a header row. </p>
 </section>
 <section title="Advanced table operations in .NET">
 <p>To process a table without a header row, we can access the raw data using the <code>Data</code>
 property. This is the equivalent of the Ruby <code>hashes</code> method. It gives us access to
 the entire table as
 a <code>List&lt;List&lt;string&gt;&gt;</code>. The first-level list contains rows. The second-level lists contain
 cell values inside each row. In this case, the table has only one column, so we'll get the following List
 <code>[["katana"],["karate-kick"],["roundhouse-kick"]]</code>. We can now process this easily and, for example, initialise
 an array of <code>Skill</code> objects with it.</p>
	<code file="dotnet/NinjaSurvivalRate/src/SkillSteps.cs" part="raw"/>

 <p>To validate the results in the third step, we create a new table using the actual values. The API in .NET differs
 significantly from the Ruby and Java counterparts in this respect. We can use the <code>Data</code> property
 of the new table to populate it with the actual data, in the same format as the result that we expect. 
 Then we can use the <code>AssertSameAs</code> method of the Cucumber table
 to compare both tables:</p>
	<code file="dotnet/NinjaSurvivalRate/src/SkillSteps.cs" part="diff"/>
<p>Unlike Java and Ruby, which print nice reports when the comparison fails and show us exactly where the problem is,
the .NET version just fails. if you get stuck you might need to debug it, as explained in <link ref="sec_dotnet_debug" />. </p>
 </section>
</section>


<section title="Using backgrounds to group related preconditions" id="sec_background">
<p>Both scenarios we use to demonstrate advanced table operations start with the same list of skills. Related scenarios
often start with the same context, or a very similar context. In such cases, it is often useful to centralise the common
setups. This will make it easier to change the setup globally in the future. It also makes scenarios shorter and easier
to understand. Cucumber supports this with backgrounds. A <define>background</define> is a special scenario executed
before each scenario in the feature file. It starts with the <code>Background</code> keyword instead of the usual 
<code>Scenario</code>. Here is how the previous example looks with a background:</p>
<code file="ruby/NinjaSurvivalRate/features/danger_levels_background.feature" />

<note title="Avoid complex backgrounds">
<p>If a feature file background starts becoming long or complex, it is often a sign that you are describing how the context
 needs to be set up
rather than what the context is. Separate the specification of the context from the procedure to set it up and automate the
 procedure using step
definitions. Backgrounds can also become complex because you are trying to define technical initialisation, for example 
allocating resources etc. 
Technical context setup should be moved to a technical hook (explained in <link ref="sec_hooks" />). </p>
</note>
</section>
<section id="sec_hooks" title="Using hooks to manage cross-cutting concerns">
<p>Cucumber feature files should ideally describe expected functionality without going into a lot of technical detail. 
This makes the feature files
simpler, easier to read and understand, and less bound to a particular technical implementation. It helps us implement 
the principle of symmetric change 
(see <link ref="imp.symmetric.changes" />). It is useful to separate technical initialisation and tear-down activities, to avoid
 duplication in step definitions, 
so Cucumber provides for this with <define>scenario hooks</define>.</p>
<p>Scenario hooks are technical actions that are executed before or after a scenario is validated. They can be set up globally (for all scenarios) or 
filtered by tags (covered in <link ref="sec_gherkin_tag" />).
</p>
<p>To demonstrate how hooks work, we'll use a simple feature demonstrating how Chuck Norris kills ninjas. 
We'll call this a killer feature, and create it in the file <code>features/killer.feature</code>.</p>
<code file="ruby/NinjaSurvivalRate/features/killer.feature" />
<p>The number of expected ninjas decreases between scenarios and the number of killed ninjas rises. We'll implement this
 using hooks, without 
doing anything in the step definition of the action. This is quite a misuse of hooks and actions but considering that Chuck 
ends up being really cool, I'm sure he won't mind. And we'll use it to demonstrate the syntax of hooks in different languages. </p>
<section title="Scenario hooks in Ruby">
<p>You can define scenario hooks in Ruby using the following syntax:</p>
<code>
Before do
 # something that happens before a scenario is executed
end
After do |scenario|
 # something that happens after a scenario is executed
end
</code>
<p>We can define the steps of the killer feature using hooks to store the global number of ninjas killed so far. Save the 
following content
into a file, for example <code>features/step_definitions/killer_steps.rb</code>.</p>
<code file="ruby/NinjaSurvivalRate/features/step_definitions/killer_steps.rb" />
<p>Run the killer feature now using the following command:</p>
<code>cucumber features/killer.feature </code>
<p>The result should appear as in <link ref="img.ruby_killer" />. The global class variables (remaining ninjas and killed ninjas) 
change every time a scenario is executed, so that you can see the effects. </p>

<img id="img.ruby_killer" title="Chuck kills ninjas using hooks in Ruby" src="ruby-killer.png" />

<important title="Scenario hooks are global">
Regardless of whether you define a hook in a step definition or in a global support file, all scenario hooks are global. 
</important>

<p>You can set up hooks in a global file, ideally in a <code>features/support</code> folder. You can also set them up in a feature
file as in the previous example. All hooks execute before or after each scenario, regardless of where they are defined. To see this effect, execute the
feature again but run one more feature before it. For example, use the following command:</p>

<code>cucumber features/ninja_survival_rate.feature features/killer.feature</code>
<p>The result is now quite different, with failing steps in our killer feature (<link ref="img.ruby_killer_global" />). Make sure to remember this
if you use hooks, or you'll end up on the one Chuck Norris uses to hang his punch bag.</p>

<img id="img.ruby_killer_global" title="Too many ninjas fall at the hand of Chuck because of global hooks" src="ruby-killer-global.png" />

<p>You can avoid this problem by assigning tags to scenarios (see <link ref="sec_gherkin_tag" />) and specifying the relevant 
tags as arguments of <code>Before</code> and <code>After</code>). For example, the following code will execute only 
before scenarios marked with <code>@killer</code>:</p>
<code>

Before('@killer') do
  # only before scenarios tagged with @killer
end
</code>
<p>For more information on scenario hooks in Ruby, see <url title="the hooks page in the Cukes wiki" link="http://github.com/aslakhellesoy/cucumber/wiki/Hooks" />.</p>
</section>
<section title="Scenario hooks in Java">
<p>You can define scenario hooks in Java using the <code>@Before</code> and <code>@After</code> annotations. For example:</p>

<code>
 @Before 
 public void thisGetsCalledBeforeEachScenario(){
   // ...
 }
 @After
 public void thisGetsCalledAfterEachScenario(){
   // ...
 }
</code>
<important>@Before and @After annotations are in the cuke4duke.annotation package,
not the cuke4duke.annotation.I18n.EN package as all the other annotations we have used so far.
</important>
<p>We can define the steps to implement our killer feature using the tags:</p>
<code file="java/NinjaSurvivalRate/src/test/java/ninjasurvivalrate/KillerSteps.java" part="steps"/>
<p>If you change the POM file to execute just the killer feature (or delete the other features), you should see the feature passing (<link ref="img.java_killer" />). Remember
that the hooks are global, although they are defined in a class file with the other steps from this feature, so they will be executed even for other features. This means
that the same test will fail if you execute all the other features from the <code>features</code> folder. To avoid this problem, mark your scenarios with tags
and list the relevant tags in the annotation. For example: </p>
<code>
 @Before("@killer")
 public void thisGetsCalledBeforeKillerScenarios(){
   // ...
 }
</code>
<img id="img.java_killer" title="Ninjas fall at Chuck's hand in Java" src="java-killer.png" />
<p>For more information on scenario hooks in other JVM languages, see <url title="the hooks page in the Cuke4Duke wiki"  link="http://github.com/aslakhellesoy/cuke4duke/wiki/Hooks" />.</p>
</section>
<section title="Scenario hooks in .NET">
<p>You can define scenario hooks in .NET using the <code>[Before]</code> and <code>[After]</code> attributes. For example:</p>
<code>
[Before]
public void ThisGetsCalledBeforeEachScenario(){
   // ...
}
[After]
public void ThisGetsCalledAfterEachScenario(){
   // ...
}
</code>
<p>We can define the steps to implement our killer feature using the tags:</p>
<code file="dotnet/NinjaSurvivalRate/src/KillerSteps.cs" part="steps"/>
<p>If you execute just the killer feature, you should see the feature passing. Remember
that the hooks are global, although they are defined in a class file with the other steps from this feature, so they will be executed even for other features. 
This means that the same test will fail if you execute all the other features from the <code>features</code> folder. 
To avoid this problem, mark your scenarios with tags and list the relevant tags in the annotation. For example: </p>
<code>
[Before("@killer")]
 public void ThisGetsCalledBeforeKillerScenarios(){
   // ...
 }
</code>
<p>For more information on scenario hooks in Cuke4Nuke, see <url title="hooks examples in the Cuke4Nuke source code" link="http://github.com/richardlawrence/Cuke4Nuke/blob/master/features/hooks.feature" />.</p>
</section>
<note title="Advanced hooks">
<p>The Ruby version of Cucumber (but not Cuke4Duke and Cuke4Nuke) supports many other types of hooks, such as step hooks
 (executed before or after each step) and global hooks (executed 
once before any test runs or after all tests finish). They are defined similarly to the scenario hooks covered in this section. For more information, see
<url title="the hooks page in the Cukes wiki" link="https://github.com/aslakhellesoy/cucumber/wiki/Hooks"/>.</p>
</note>
</section>
</chapter>
